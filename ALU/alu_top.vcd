$version Generated by VerilatedVcd $end
$timescale 1s $end
 $scope module TOP $end
  $var wire 4 ^ i_a [3:0] $end
  $var wire 4 _ i_b [3:0] $end
  $var wire 3 ` i_op [2:0] $end
  $var wire 4 a o_led [3:0] $end
  $var wire 1 b o_carry $end
  $var wire 8 c o_seg [7:0] $end
  $var wire 1 d o_overflow $end
  $var wire 1 e o_max $end
  $var wire 1 f o_equ $end
  $scope module alu_top $end
   $var wire 4 ^ i_a [3:0] $end
   $var wire 4 _ i_b [3:0] $end
   $var wire 3 ` i_op [2:0] $end
   $var wire 4 a o_led [3:0] $end
   $var wire 1 b o_carry $end
   $var wire 8 c o_seg [7:0] $end
   $var wire 1 d o_overflow $end
   $var wire 1 e o_max $end
   $var wire 1 f o_equ $end
   $var wire 4 3 i_a_2 [3:0] $end
   $var wire 4 4 i_b_2 [3:0] $end
   $var wire 4 g sub_i_b [3:0] $end
   $var wire 4 5 sub_i_b_2 [3:0] $end
   $var wire 4 6 led_0 [3:0] $end
   $var wire 4 7 led_1 [3:0] $end
   $var wire 4 h led_2 [3:0] $end
   $var wire 4 8 led_3 [3:0] $end
   $var wire 4 9 led_4 [3:0] $end
   $var wire 4 : led_5 [3:0] $end
   $var wire 4 ; led_6 [3:0] $end
   $var wire 4 ^ led_7 [3:0] $end
   $var wire 4 < o_led_0 [3:0] $end
   $var wire 1 = carry_0 $end
   $var wire 1 > carry_1 $end
   $var wire 1 m overflow_0 $end
   $var wire 1 m overflow_1 $end
   $var wire 1 ? max_0 $end
   $var wire 1 i equ_0 $end
   $scope module i0 $end
    $var wire 32 n NR_KEY [31:0] $end
    $var wire 32 o KEY_LEN [31:0] $end
    $var wire 32 p DATA_LEN [31:0] $end
    $var wire 4 < out [3:0] $end
    $var wire 3 ` key [2:0] $end
    $var wire 56 j lut [55:0] $end
    $scope module i0 $end
     $var wire 32 n NR_KEY [31:0] $end
     $var wire 32 o KEY_LEN [31:0] $end
     $var wire 32 p DATA_LEN [31:0] $end
     $var wire 32 q HAS_DEFAULT [31:0] $end
     $var wire 4 < out [3:0] $end
     $var wire 3 ` key [2:0] $end
     $var wire 4 r default_out [3:0] $end
     $var wire 56 j lut [55:0] $end
     $var wire 32 s PAIR_LEN [31:0] $end
     $var wire 7 @ pair_list[0] [6:0] $end
     $var wire 7 A pair_list[1] [6:0] $end
     $var wire 7 B pair_list[2] [6:0] $end
     $var wire 7 C pair_list[3] [6:0] $end
     $var wire 7 D pair_list[4] [6:0] $end
     $var wire 7 E pair_list[5] [6:0] $end
     $var wire 7 F pair_list[6] [6:0] $end
     $var wire 7 G pair_list[7] [6:0] $end
     $var wire 3 # key_list[0] [2:0] $end
     $var wire 3 $ key_list[1] [2:0] $end
     $var wire 3 % key_list[2] [2:0] $end
     $var wire 3 & key_list[3] [2:0] $end
     $var wire 3 ' key_list[4] [2:0] $end
     $var wire 3 ( key_list[5] [2:0] $end
     $var wire 3 ) key_list[6] [2:0] $end
     $var wire 3 * key_list[7] [2:0] $end
     $var wire 4 H data_list[0] [3:0] $end
     $var wire 4 I data_list[1] [3:0] $end
     $var wire 4 J data_list[2] [3:0] $end
     $var wire 4 K data_list[3] [3:0] $end
     $var wire 4 L data_list[4] [3:0] $end
     $var wire 4 M data_list[5] [3:0] $end
     $var wire 4 N data_list[6] [3:0] $end
     $var wire 4 O data_list[7] [3:0] $end
     $var wire 4 P lut_out [3:0] $end
     $var wire 1 Q hit $end
     $var wire 32 t i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module i2 $end
    $var wire 32 u NR_KEY [31:0] $end
    $var wire 32 o KEY_LEN [31:0] $end
    $var wire 32 v DATA_LEN [31:0] $end
    $var wire 1 b out [0:0] $end
    $var wire 3 ` key [2:0] $end
    $var wire 8 R lut [7:0] $end
    $scope module i0 $end
     $var wire 32 u NR_KEY [31:0] $end
     $var wire 32 o KEY_LEN [31:0] $end
     $var wire 32 v DATA_LEN [31:0] $end
     $var wire 32 q HAS_DEFAULT [31:0] $end
     $var wire 1 b out [0:0] $end
     $var wire 3 ` key [2:0] $end
     $var wire 1 m default_out [0:0] $end
     $var wire 8 R lut [7:0] $end
     $var wire 32 p PAIR_LEN [31:0] $end
     $var wire 4 S pair_list[0] [3:0] $end
     $var wire 4 T pair_list[1] [3:0] $end
     $var wire 3 + key_list[0] [2:0] $end
     $var wire 3 , key_list[1] [2:0] $end
     $var wire 1 U data_list[0] [0:0] $end
     $var wire 1 V data_list[1] [0:0] $end
     $var wire 1 W lut_out [0:0] $end
     $var wire 1 X hit $end
     $var wire 32 w i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module i3 $end
    $var wire 32 u NR_KEY [31:0] $end
    $var wire 32 o KEY_LEN [31:0] $end
    $var wire 32 v DATA_LEN [31:0] $end
    $var wire 1 d out [0:0] $end
    $var wire 3 ` key [2:0] $end
    $var wire 8 x lut [7:0] $end
    $scope module i0 $end
     $var wire 32 u NR_KEY [31:0] $end
     $var wire 32 o KEY_LEN [31:0] $end
     $var wire 32 v DATA_LEN [31:0] $end
     $var wire 32 q HAS_DEFAULT [31:0] $end
     $var wire 1 d out [0:0] $end
     $var wire 3 ` key [2:0] $end
     $var wire 1 m default_out [0:0] $end
     $var wire 8 x lut [7:0] $end
     $var wire 32 p PAIR_LEN [31:0] $end
     $var wire 4 - pair_list[0] [3:0] $end
     $var wire 4 . pair_list[1] [3:0] $end
     $var wire 3 / key_list[0] [2:0] $end
     $var wire 3 0 key_list[1] [2:0] $end
     $var wire 1 1 data_list[0] [0:0] $end
     $var wire 1 2 data_list[1] [0:0] $end
     $var wire 1 Y lut_out [0:0] $end
     $var wire 1 Z hit $end
     $var wire 32 w i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module u0_adder $end
    $var wire 4 3 i_a [3:0] $end
    $var wire 4 4 i_b [3:0] $end
    $var wire 4 6 o_led [3:0] $end
    $var wire 1 = o_carry $end
    $var wire 1 m o_overflow $end
    $var wire 4 [ led [3:0] $end
   $upscope $end
   $scope module u0_log_and $end
    $var wire 4 ^ i_a [3:0] $end
    $var wire 4 _ i_b [3:0] $end
    $var wire 4 8 o_led [3:0] $end
   $upscope $end
   $scope module u0_log_equ $end
    $var wire 4 ^ i_a [3:0] $end
    $var wire 4 _ i_b [3:0] $end
    $var wire 4 ^ o_led [3:0] $end
    $var wire 1 i o_equ $end
   $upscope $end
   $scope module u0_log_max $end
    $var wire 4 ^ i_a [3:0] $end
    $var wire 4 _ i_b [3:0] $end
    $var wire 4 ; o_led [3:0] $end
    $var wire 1 ? o_max $end
   $upscope $end
   $scope module u0_log_nor $end
    $var wire 4 ^ i_a [3:0] $end
    $var wire 4 h o_led [3:0] $end
   $upscope $end
   $scope module u0_log_or $end
    $var wire 4 ^ i_a [3:0] $end
    $var wire 4 _ i_b [3:0] $end
    $var wire 4 9 o_led [3:0] $end
   $upscope $end
   $scope module u0_log_xor $end
    $var wire 4 ^ i_a [3:0] $end
    $var wire 4 _ i_b [3:0] $end
    $var wire 4 : o_led [3:0] $end
   $upscope $end
   $scope module u0_seg $end
    $var wire 1 l i_minus $end
    $var wire 3 \ i_seg [2:0] $end
    $var wire 8 c o_seg [7:0] $end
    $var wire 8 y num0 [7:0] $end
    $var wire 8 z num1 [7:0] $end
    $var wire 8 { num2 [7:0] $end
    $var wire 8 | num3 [7:0] $end
    $var wire 8 } num4 [7:0] $end
    $var wire 8 ~ num5 [7:0] $end
    $var wire 8 !! num6 [7:0] $end
    $var wire 8 "! num7 [7:0] $end
    $var wire 8 #! num8 [7:0] $end
   $upscope $end
   $scope module u1_adder $end
    $var wire 4 3 i_a [3:0] $end
    $var wire 4 5 i_b [3:0] $end
    $var wire 4 7 o_led [3:0] $end
    $var wire 1 > o_carry $end
    $var wire 1 m o_overflow $end
    $var wire 4 ] led [3:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b111 #
b110 $
b101 %
b100 &
b011 '
b010 (
b001 )
b000 *
b001 +
b000 ,
b0010 -
b0000 .
b001 /
b000 0
01
02
b0011 3
b1111 4
b0001 5
b0010 6
b0100 7
b0001 8
b1011 9
b1010 :
b1001 ;
b0100 <
1=
0>
0?
b1110011 @
b1101001 A
b1011010 B
b1001011 C
b0110001 D
b0101100 E
b0010100 F
b0000010 G
b0011 H
b1001 I
b1010 J
b1011 K
b0001 L
b1100 M
b0100 N
b0010 O
b0100 P
1Q
b00010010 R
b0010 S
b0001 T
0U
1V
0W
1X
0Y
1Z
b0010 [
b100 \
b0100 ]
b0011 ^
b1001 _
b001 `
b0100 a
0b
b10011001 c
0d
0e
0f
b0001 g
b1100 h
0i
b00000100010100010110001100011001011101101011010011110011 j
0l
0m
b00000000000000000000000000001000 n
b00000000000000000000000000000011 o
b00000000000000000000000000000100 p
b00000000000000000000000000000000 q
b0000 r
b00000000000000000000000000000111 s
b00000000000000000000000000001000 t
b00000000000000000000000000000010 u
b00000000000000000000000000000001 v
b00000000000000000000000000000010 w
b00000010 x
b11111101 y
b01100000 z
b11011010 {
b11110010 |
b01100110 }
b10110110 ~
b10111110 !!
b11100000 "!
b11111111 #!
#2
#3
#4
#5
#6
#7
#8
#9
#10
#11
